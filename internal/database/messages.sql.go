// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: messages.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (id, sender_id, recipient_id, content, created_at, ttl_seconds, expires_at)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, sender_id, recipient_id, content, created_at, read_at, ttl_seconds, expires_at, deleted
`

type CreateMessageParams struct {
	ID          uuid.UUID
	SenderID    uuid.UUID
	RecipientID uuid.UUID
	Content     string
	CreatedAt   time.Time
	TtlSeconds  sql.NullInt32
	ExpiresAt   sql.NullTime
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, createMessage,
		arg.ID,
		arg.SenderID,
		arg.RecipientID,
		arg.Content,
		arg.CreatedAt,
		arg.TtlSeconds,
		arg.ExpiresAt,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.SenderID,
		&i.RecipientID,
		&i.Content,
		&i.CreatedAt,
		&i.ReadAt,
		&i.TtlSeconds,
		&i.ExpiresAt,
		&i.Deleted,
	)
	return i, err
}

const getRecievedMessages = `-- name: GetRecievedMessages :many
SELECT id, sender_id, recipient_id, content, created_at, read_at, ttl_seconds, expires_at, deleted FROM
messages WHERE recipient_id = $1
`

func (q *Queries) GetRecievedMessages(ctx context.Context, recipientID uuid.UUID) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getRecievedMessages, recipientID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.SenderID,
			&i.RecipientID,
			&i.Content,
			&i.CreatedAt,
			&i.ReadAt,
			&i.TtlSeconds,
			&i.ExpiresAt,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSentMessages = `-- name: GetSentMessages :many
SELECT id, sender_id, recipient_id, content, created_at, read_at, ttl_seconds, expires_at, deleted FROM
messages WHERE sender_id = $1
`

func (q *Queries) GetSentMessages(ctx context.Context, senderID uuid.UUID) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getSentMessages, senderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.SenderID,
			&i.RecipientID,
			&i.Content,
			&i.CreatedAt,
			&i.ReadAt,
			&i.TtlSeconds,
			&i.ExpiresAt,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
