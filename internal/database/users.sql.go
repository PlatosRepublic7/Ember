// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO refresh_tokens(refresh_token, is_valid, created_at, updated_at, user_id)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, refresh_token, is_valid, created_at, updated_at, user_id
`

type CreateRefreshTokenParams struct {
	RefreshToken string
	IsValid      bool
	CreatedAt    time.Time
	UpdatedAt    time.Time
	UserID       uuid.UUID
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, createRefreshToken,
		arg.RefreshToken,
		arg.IsValid,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
	)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.RefreshToken,
		&i.IsValid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, username, email, password)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, created_at, updated_at, username, password, email
`

type CreateUserParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Username  string
	Email     string
	Password  string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Username,
		arg.Email,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Password,
		&i.Email,
	)
	return i, err
}

const getAllUserRefreshTokens = `-- name: GetAllUserRefreshTokens :many
SELECT id, refresh_token, is_valid, created_at, updated_at, user_id FROM refresh_tokens WHERE user_id = $1
`

func (q *Queries) GetAllUserRefreshTokens(ctx context.Context, userID uuid.UUID) ([]RefreshToken, error) {
	rows, err := q.db.QueryContext(ctx, getAllUserRefreshTokens, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RefreshToken
	for rows.Next() {
		var i RefreshToken
		if err := rows.Scan(
			&i.ID,
			&i.RefreshToken,
			&i.IsValid,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRefreshToken = `-- name: GetRefreshToken :one
SELECT id, refresh_token, is_valid, created_at, updated_at, user_id FROM refresh_tokens WHERE refresh_token = $1
`

func (q *Queries) GetRefreshToken(ctx context.Context, refreshToken string) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getRefreshToken, refreshToken)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.RefreshToken,
		&i.IsValid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, created_at, updated_at, username, password, email FROM users WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Password,
		&i.Email,
	)
	return i, err
}

const getUserLoginInfo = `-- name: GetUserLoginInfo :one
SELECT id, username, email, password FROM users WHERE email = $1
`

type GetUserLoginInfoRow struct {
	ID       uuid.UUID
	Username string
	Email    string
	Password string
}

func (q *Queries) GetUserLoginInfo(ctx context.Context, email string) (GetUserLoginInfoRow, error) {
	row := q.db.QueryRowContext(ctx, getUserLoginInfo, email)
	var i GetUserLoginInfoRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const updateRefreshToken = `-- name: UpdateRefreshToken :exec
UPDATE refresh_tokens SET 
is_valid = $1, updated_at = $2 
WHERE refresh_token = $3
`

type UpdateRefreshTokenParams struct {
	IsValid      bool
	UpdatedAt    time.Time
	RefreshToken string
}

func (q *Queries) UpdateRefreshToken(ctx context.Context, arg UpdateRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, updateRefreshToken, arg.IsValid, arg.UpdatedAt, arg.RefreshToken)
	return err
}
